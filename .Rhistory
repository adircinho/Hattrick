2^1024
0/0
fecha_primer_curso_R <- Sys.Date()
fecha_primer_curso_R
vector("numeric", length = 10)
vector("character", length = 10)
vector("logical", length = 10)
list(0, "Hola", TRUE)
c(T, 19, 1+3i)
c <- vector("numeric", length = 5)
c
as.logical(c)
class(c)
class(as.logical(c))
m <- matrix(data=1:12,nrow=4,ncol=3)
m
factor(colores)
data.frame(llave=y, color=colores)
mi_variable <- (180 / 60) - 15
mi_variable
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# --------------------------------------------------------------- #
#----Visualización datos COVID-19 para Colombia  OData-------------
# --------------------------------------------------------------- #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# +++++++++++++++++++ #
#----Borrar memoria----
# +++++++++++++++++++ #
rm(list=ls())
# +++++++++++++++++++++++++++++++++++++++++++++ #
#----Instalar y cargar o sólo cargar paquetes----
# +++++++++++++++++++++++++++++++++++++++++++++ #
if("RSocrata" %in% rownames(installed.packages()) == FALSE) {install.packages("RSocrata")}
library(RSocrata) # Importar datos desde plataforma OData INS
if("plyr" %in% rownames(installed.packages()) == FALSE) {install.packages("plyr")}
library(plyr)
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
library(tidyverse)
if("readxl" %in% rownames(installed.packages()) == FALSE) {install.packages("readxl")}
library(readxl)
if("openxlsx" %in% rownames(installed.packages()) == FALSE) {install.packages("openxlsx")}
library(openxlsx)
if("MESS" %in% rownames(installed.packages()) == FALSE) {install.packages("MESS")}
library(MESS) # Para redondear eficientemente
if("lubridate" %in% rownames(installed.packages()) == FALSE) {install.packages("lubridate")}
library(lubridate)
if("forcats" %in% rownames(installed.packages()) == FALSE) {install.packages("forcats")}
library(forcats) # Para trabajar con variables categóricas
if("janitor" %in% rownames(installed.packages()) == FALSE) {install.packages("janitor")}
library(janitor)
if("scales" %in% rownames(installed.packages()) == FALSE) {install.packages("scales")}
library(scales) # Para colocar el fondo negro en los plots.
if("ggdark" %in% rownames(installed.packages()) == FALSE) {install.packages("ggdark")}
library(ggdark) # Para colocar el fondo negro en los plots.
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# --------------------------------------------------------------- #
#----Visualización datos COVID-19 para Colombia  OData-------------
# --------------------------------------------------------------- #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# +++++++++++++++++++ #
#----Borrar memoria----
# +++++++++++++++++++ #
rm(list=ls())
# +++++++++++++++++++++++++++++++++++++++++++++ #
#----Instalar y cargar o sólo cargar paquetes----
# +++++++++++++++++++++++++++++++++++++++++++++ #
if("RSocrata" %in% rownames(installed.packages()) == FALSE) {install.packages("RSocrata")}
library(RSocrata) # Importar datos desde plataforma OData INS
if("plyr" %in% rownames(installed.packages()) == FALSE) {install.packages("plyr")}
library(plyr)
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
library(tidyverse)
if("readxl" %in% rownames(installed.packages()) == FALSE) {install.packages("readxl")}
library(readxl)
if("openxlsx" %in% rownames(installed.packages()) == FALSE) {install.packages("openxlsx")}
library(openxlsx)
if("MESS" %in% rownames(installed.packages()) == FALSE) {install.packages("MESS")}
library(MESS) # Para redondear eficientemente
if("lubridate" %in% rownames(installed.packages()) == FALSE) {install.packages("lubridate")}
library(lubridate)
if("forcats" %in% rownames(installed.packages()) == FALSE) {install.packages("forcats")}
library(forcats) # Para trabajar con variables categóricas
if("janitor" %in% rownames(installed.packages()) == FALSE) {install.packages("janitor")}
library(janitor)
if("scales" %in% rownames(installed.packages()) == FALSE) {install.packages("scales")}
library(scales) # Para colocar el fondo negro en los plots.
if("ggdark" %in% rownames(installed.packages()) == FALSE) {install.packages("ggdark")}
library(ggdark) # Para colocar el fondo negro en los plots.
install.packages(c("swirl", "lattice", "car", "flmport", "tseries"))
install.packages("curl", dependencies =	TRUE)
install.packages(c("swirl", "lattice", "car", "flmport", "tseries"))
install.packages("curl", dependencies =	TRUE)
install.packages("httr", dependencies =	TRUE)
library(swirl)
select_language()
install.packages(c("swirl", "lattice", "car", "flmport", "tseries"))
install.packages(c("swirl", "lattice", "car", "flmport", "tseries"))
library(swirl)
select_language()
swirl()
swirl()
install_course_github("ifunam", "programacion-estadistica-r")
swirl()
10
mi_variable <- (180 / 6) - 15
mi_variable
y <- c(561, 1105, 1729, 2465, 2821)
y
print(y)
1:100
c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1)
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) - c(1, 2)
ls()
"¡Hola Mundo!"
colores <- c("rojo", "azul", "verde", "azul", "rojo")
colores
complejo <- 2+1i
mi_variable == 15
length(complejo) <- 3
complejo
2^1024
0/0
fecha_primer_curso_R <- Sys.Date()
fecha_primer_curso_R
vector("numeric", length = 10)
vector("character", length = 10)
vector("logical", length = 10)
list(0, "Hola", TRUE)
c(T, 19, 1+3i)
c <- vector("numeric", length = 5)
c
as.logical(c)
class(c)
class(as.logical(c))
m <- matrix(data=1:12,nrow=4,ncol=3)
m
factor(colores)
data.frame(llave=y, color=colores)
mi_variable <- (180 / 60) - 15
mi_variable
help.start()
?print
apropos("class")
example("read.table")
??regression
vignette("tests")
mi_vector <- c(11:30)
mi_vector
mi_vector[[3]]
mi_vector[3]
mi_vector[1:5]
mi_vector[c(4,6,13)]
mi_vector[c(6,13,4)]
mi_vector[[3]]
mi_vector[-9:-15]
mi_vector[rep(c(TRUE,FALSE),10)]
mi_vector[c(FALSE,FALSE,TRUE)]
mi_vector > 20
mi_vector[(mi_vector > 20)]
mi_arreglo <- array(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),dim=c(3,3,2))
mi_arreglo
mi_arreglo[1,3,2]
mi_arreglo[1:2,1:2,1]
mi_matriz <- matrix(1:9, nrow = 3, ncol = 3)
mi_matriz[1,]
mi_matriz[,1]
mi_matriz[2:3,]
mi_matriz[c(1,3),]
carro <- list(color="rojo", nllantas=4, marca="Renault", ncilindros=4)
carro$color
carro[c("ncilindros","nllantas")]
View(carro)
carro[["marca"]]
carro[["mar",exact=FALSE]]
camioneta <- list(color="azul", nllantas=4, marca= "BMW", ncilindros=6)
cochera <- list(carro, camioneta)
cochera
cochera[[c(2, 1)]]
cars
cars$speed
cars$dist>100
cars$speed[cars$dist>100]
datos <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1")
datos_2 <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",")
datos2 <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",")
View(datos)
inicial <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1", nrow = 100)
clases <- sapply(inicial, class)
clases
datos <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1", colClasses=clases)
save(datos, clases, file="swirl_temp/datos_inmigrates.RData")
rm(datos,clases)
ls()
load("swirl_temp/datos_inmigrates.RData")
ls()
write.table(datos, file="swirl_temp/datos.txt")
bye()
install.packages("hrbrthemes")
library(hrbrthemes)
install.packages("waffle")
devtools::install_github("hrbrmstr/waffle")
devtools::install_bitbucket("hrbrmstr/waffle")
install.packages("waffle")
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# --------------------------------------------------------------- #
#---- Día 16 - 30 días de gráficos joining #TidyTuesday------------
# --------------------------------------------------------------- #
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ #
# +++++++++++++++++++ #
#----Borrar memoria----
# +++++++++++++++++++ #
rm(list=ls())
# +++++++++++++++++++++++++++++++++++++++++++++ #
#----Instalar y cargar o sólo cargar paquetes----
# +++++++++++++++++++++++++++++++++++++++++++++ #
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
library(tidyverse)
if("MESS" %in% rownames(installed.packages()) == FALSE) {install.packages("MESS")}
library(MESS) # Para redondear eficientemente
if("ggdark" %in% rownames(installed.packages()) == FALSE) {install.packages("ggdark")}
library(ggdark) # Para colocar el fondo negro en los plots.
if("glue" %in% rownames(installed.packages()) == FALSE) {install.packages("glue")}
library(glue) # Para crear etiquetas y literalmente pegarlas en el gráfico
if("cowplot" %in% rownames(installed.packages()) == FALSE) {install.packages("cowplot")}
library(cowplot)
if("waffle" %in% rownames(installed.packages()) == FALSE) {install.packages("waffle")}
library(waffle)
library(tidyverse)
4^3
3^4
reticulate::repl_python()
import pandas as pd
quit
# ++++++++++++++++++++++++++++++++++++++ #
# -------------------------------------- #
#---Estimación Índice de Alianzas 2019----
# -------------------------------------- #
# ++++++++++++++++++++++++++++++++++++++ #
# +++++++++++++++++++++++++++++++++++++++++++++ #
#---Instalar y cargar o sólo cargar paquetes----
# +++++++++++++++++++++++++++++++++++++++++++++ #
if("RODBC" %in% rownames(installed.packages()) == FALSE) {install.packages("RODBC")}
library(RODBC) # Para cargar datos desde SQL
if("tidyverse" %in% rownames(installed.packages()) == FALSE) {install.packages("tidyverse")}
library(tidyverse) # Para analizar la información
if("openxlsx" %in% rownames(installed.packages()) == FALSE) {install.packages("openxlsx")}
library(openxlsx) # Para exportar datos a Excel
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("jsonlite", type = "source")
library(lattice)
data(barley)
head(barley)
ggplot(barley,aes(year, yield)) + geom_point(color = variety)
library(ggplot2)
ggplot(barley,aes(year, yield)) + geom_point(color = variety)
ggplot(barley,aes(year, yield)) + geom_point(color = variety)
ggplot(barley,aes(year, yield, color = variety))
ggplot(barley,aes(year, yield)) + geom_point(aes(color = variety))
View(barley)
library(ggplot2)
library(faraway)
data(nepali)
head(nepali, 3)
str(nepali)
nepali %>%
mutate(id = factor(id)) %>%
ggplot(aes(x = height, y = weight)) +
geom_point(color = id)
library(dplyr)
nepali %>%
mutate(id = factor(id)) %>%
ggplot(aes(x = height, y = weight)) +
geom_point(color = id)
View(nepali)
data(trees)
head(trees)
trees %>%
ggplot() +
geom_point(x = Girth, y = Height, size = Volume)
ggplot(trees, aes(x = Girth, y = Height, size = Volume)) +
geom_point()
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(size = Volume)
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(aes(size = Volume))
trees %>%
ggplot(aes(x = Girth, y = Height, size = Volume)) +
geom_point()
trees %>%
ggplot() +
geom_point(aes(x = Girth, y = Height, size = Volume))
ggplot() +
geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
ggplot() +
geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
trees %>%
ggplot() +
geom_point(x = Girth, y = Height, size = Volume)
trees %>%
ggplot() +
geom_point(x = Girth, y = Height, size = Volume)
trees %>%
ggplot() +
geom_point(x = Girth, y = Height, size = Volume)
trees %>%
ggplot(aes(x = Girth, y = Height, size = Volume)) +
geom_point()
ggplot(trees, aes(x = Girth, y = Height, size = Volume)) +
geom_point()
ggplot() +
geom_point(data = trees,
aes(x = Girth, y = Height, size = Volume))
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(aes(size = Volume))
trees %>%
ggplot(aes(x = Girth, y = Height)) +
geom_point(size = Volume)
trees %>%
ggplot() +
geom_point(aes(x = Girth, y = Height, size = Volume))
ggplot() +
geom_point(trees,
aes(x = Girth, y = Height, size = Volume))
#Be sure to restart the session in order to be sure that
#to have a clean session
library(magrittr)
source("./geom-hurricane.R")
#get the storm observation from cleaned data
data_hurricane <- readr::read_csv(file = "./data/ebtrk_atlc_1988_2015.cleaned.txt")
data_hurricane$wind_speed <- as.factor(data_hurricane$wind_speed)
storm_observation_ike <- data_hurricane[data_hurricane$storm_id == "IKE-2008" &
data_hurricane$date == lubridate::ymd_hms("2008-09-11 18:00:00"),]
storm_observation_ike_next <- data_hurricane[data_hurricane$storm_id == "IKE-2008" &
data_hurricane$date == lubridate::ymd_hms("2008-09-12 06:00:00"),]
png("hurricane_ike_2_observations.png")
Data <- data.frame(date = c(112233,112233,223344,223344)
time = c(916,1600,916,1600,916,1600),
open = c(25856,25076, 25056, 25028),
close = c(25779, 25079, 25084, 25022))
Data <- data.frame(date = c(112233,112233,223344,223344)
time = c(916,1600,916,1600,),
open = c(25856,25076, 25056, 25028),
close = c(25779, 25079, 25084, 25022))
library(tidyverse)
Data <- data.frame(date = c(112233,112233,223344,223344)
time = c(916,1600,916,1600,),
open = c(25856,25076, 25056, 25028),
close = c(25779, 25079, 25084, 25022))
library(tidyverse)
Data <- data.frame(date = c(112233,112233,223344,223344),
time = c(916,1600,916,1600),
open = c(25856,25076, 25056, 25028),
close = c(25779, 25079, 25084, 25022))
View(Data)
TableOpen <- Data %>%
filter(time == 916) %>%
group_by(date, open) %>%
summarise(total = n())
View(TableOpen)
TableOpen <- Data %>%
filter(time == 916) %>%
group_by(date, open) %>%
summarise(total = n())
TableClose <- Data %>%
filter(time == 1600) %>%
group_by(date, open) %>%
summarise(total = n())
TableOpen <- Data %>%
filter(time == 916) %>%
group_by(date, open) %>%
summarise(total = n()) %>%
select(-total)
TableClose <- Data %>%
filter(time == 1600) %>%
group_by(date, open) %>%
summarise(total = n()) %>%
select(-total)
Table <- left_join(TableOpen,TableClose, by="time")
Table <- left_join(TableOpen,TableClose, by ="time")
View(TableClose)
Table <- left_join(TableOpen,TableClose, by ="date"
Table <- left_join(TableOpen,TableClose, by ="date")
View(Table)
TableClose <- Data %>%
filter(time == 1600) %>%
group_by(date, close) %>%
summarise(total = n()) %>%
select(-total)
Table <- left_join(TableOpen,TableClose, by ="date")
View(Table)
Data %>% clean_names() %>%
mutate(
type = case_when(date == "0916" ~ "open (9:16)",
TRUE ~ "close(16:00)"),
selected_value = case_when(date == "0916" ~ open,
TRUE ~ close) )%>%
Select(date, type, selected_value) %>%
Pivot_wider(names_from = "type", values_from = "selected_value")
library(tidyverse)
library (janitor)
Data <- data.frame(date = c(112233,112233,223344,223344),
time = c(916,1600,916,1600),
open = c(25856,25076, 25056, 25028),
close = c(25779, 25079, 25084, 25022))
Data %>% clean_names() %>%
mutate(
type = case_when(date == "0916" ~ "open (9:16)",
TRUE ~ "close(16:00)"),
selected_value = case_when(date == "0916" ~ open,
TRUE ~ close) )%>%
Select(date, type, selected_value) %>%
Pivot_wider(names_from = "type", values_from = "selected_value")
Data %>% clean_names() %>%
mutate(
type = case_when(date == "0916" ~ "open (9:16)",
TRUE ~ "close(16:00)"),
selected_value = case_when(date == "0916" ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
Datos <- Data %>% clean_names() %>%
mutate(
type = case_when(date == "0916" ~ "open (9:16)",
TRUE ~ "close(16:00)"),
selected_value = case_when(date == "0916" ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
View(Datos)
View(Data)
Datos <- Data %>% clean_names() %>%
mutate(
type = case_when(time == 916 ~ "open (9:16)",
TRUE ~ "close(16:00)"),
selected_value = case_when(date == 0916 ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
View(Datos)
View(Data)
Datos <- Data %>% clean_names() %>%
mutate(
type = case_when(time == 916 ~ "open (9:16)",
TRUE ~ "close (16:00)"),
selected_value = case_when(date == 916 ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
Datos <- Data %>% clean_names() %>%
mutate(
type = case_when(time == 916 ~ "open (9:16)",
TRUE ~ "close (16:00)"),
selected_value = case_when(date == 1600 ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
Datos <- Data %>% clean_names() %>%
mutate(
type = case_when(time == 916 ~ "open (9:16)",
TRUE ~ "close (16:00)"),
selected_value = case_when(time == 916 ~ open,
TRUE ~ close) )%>%
select(date, type, selected_value) %>%
pivot_wider(names_from = "type", values_from = "selected_value")
?case_when
x <- 1:50
case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
TRUE ~ as.character(x)
)
y <- seq(-2, 2, by = .5)
case_when(
y >= 0 ~ sqrt(y),
TRUE   ~ y
)
y <- seq(-2, 2, by = .5)
y
case_when(
y >= 0 ~ sqrt(y),
TRUE   ~ y)
Datos <- Data %>%
clean_names() %>%
mutate(type = case_when(time == 916 ~ "open (9:16)",
TRUE ~ "close (16:00)"),
selected_value = case_when(time == 916 ~ open,
TRUE ~ close))
View(Datos)
library(tidyverse)
library(stringr)
library(lubridate)
rm(list = ls())
setwd("C:/Users/CCardona/OneDrive - ACDI VOCA/Mis Documentos/Westing/Httrck/")
file_names <- list.files(path = "C:/Users/CCardona/OneDrive - ACDI VOCA/Mis Documentos/Westing/Httrck/",
pattern = ".csv")
final_output <- purrr::map_df(file_names, function(x) {
data <- read_csv(x)
cbind(file_id = x, data)
})
Datos <- final_output %>%
mutate(Fecha = substr(file_id, 9,18)) %>%
separate(Fecha, into = c("Dia", "Mes", "Anio"), sep = "_",remove = FALSE) %>%
mutate(Fecha = gsub("_","-",Fecha)) %>%
mutate(Fecha = dmy(Fecha))
View(Datos)
